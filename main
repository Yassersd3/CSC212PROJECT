package CSC212_PROJECT;

import java.util.Scanner;

public class TestMenu {

	static files file;
	static QueryBST query;
	static Ranking ranking;

	public static void main(String[] args) {
		file = new files();
		file.saveStopWords("stop.txt");
		file.saveDocuments("dataset.csv");

		query = new QueryBST(file.invertedBST);
		ranking = new Ranking(file.invertedBST);

		Scanner input = new Scanner(System.in);
		int choice;
		do {
			choice = displayMenu(input);
			switch (choice) {
			case 1:
				BooleanRetrieval(input);
				break;
			case 2:
				RankedRetrieval(input);
				break;
			case 3:
				displayIndexedDocuments();
				break;
			case 4:
				displayIndexedTokens();
				break;
			case 5:
				numberOfDocs();
				break;
			case 6:
				searching(input);
				break;
			case 7:
				System.out.println("Exiting the program...");
				break;
			default:
				System.out.println("Invalid choice. Please try again.");
			}
		} while (choice != 7);

		input.close();
	}

	public static int displayMenu(Scanner input) {
		System.out.println("\n========== Search Engine Menu ==========");
		System.out.println("1. Boolean Retrieval");
		System.out.println("2. Ranked Retrieval");
		System.out.println("3. Display Indexed Documents");
		System.out.println("4. Display Indexed Tokens and vocabulary");
		System.out.println("5. Display number od documents in the index");
System.out.println("6. search for a word");
		System.out.println("7. Exit");
		System.out.print("Enter your choice: ");
		return input.nextInt();
	}

	public static void numberOfDocs() {
		System.out.println("Number of documents in the index is: " + file.numberOfDocs);
	}

	public static void searching(Scanner input) {
		System.out.println("Enter a word to search: ");
		String word = input.next();
		if (file.invertedBST.search(word)) {
			System.out.println("The word " + word + " is exist in the following documents: ");
			file.index1.displayDocsByWord(word);
		}
		else
			System.out.println("The word " + word + " dosen't exist");

	}

	public static void BooleanRetrieval(Scanner input) {
		input.nextLine();
		Linkedlist<Integer> result;
		System.out.print("Enter a Boolean query AND-OR-NOT: ");
		String queryInput = input.nextLine();
		if (queryInput.contains("NOT")) 
			result = query.NotQuery(queryInput, file.index1);
		else
			result = query.BothQuerys(queryInput);
System.out.println("Matching Document:\n");
		file.displayDocByIds(result);
	}

	public static void RankedRetrieval(Scanner input) {
		input.nextLine();
		System.out.print("Enter a ranked query: ");
		String queryInput = input.nextLine();
		ranking = new Ranking(queryInput, file.invertedBST, file.index1);
		ranking.proccess();
		System.out.println("Ranked Results:");
		ranking.display();
	}

	public static void displayIndexedDocuments() {
		System.out.println("Indexed Documents:");
		file.index1.displayDocs();
	}

	public static void displayIndexedTokens() {
		System.out.println("Indexed Vocabulary and Tokens:");
		System.out.println("\nNumber of Tokens: " + file.numberOfTokens);
		System.out.println("Number of Vocabulary Terms: " + file.numberOfVocabs);
	}
}
