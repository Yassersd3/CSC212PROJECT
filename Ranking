package CSC212_PROJECT;

class Rank {
	int id, rank;

	public Rank(int id, int rank) {
		this.id = id;
		this.rank = rank;
	}

	public void displayInRank() {
		System.out.println(id + "		 " + rank);
	}
}

public class Ranking {

	String query;
	InvertedIndexBST invertedBST;
	index ind;
	Linkedlist<Integer> QueryDocsIds;
	Linkedlist<Rank> rankDocs;

	public Ranking(InvertedIndexBST invertedBST) {
		this.invertedBST = invertedBST;
	}

	public Ranking(String query, InvertedIndexBST invertedBST, index ind) {
		this.query = query;
		this.invertedBST = invertedBST;
		this.ind = ind;
		QueryDocsIds = new Linkedlist<Integer>();
		rankDocs = new Linkedlist<Rank>();
	}

	public Documents getDocsById(int id) {
		return ind.getDocById(id);
	}

	public int freqInDoc(Documents d, String s) {
		int freq = 0;
		Linkedlist<String> words = d.words;
		words.findfirst();
		while (!words.last()) {
			if (words.retrieve().equalsIgnoreCase(s))
				freq++;
			words.findnext();
		}
		if (words.retrieve().equalsIgnoreCase(s))
			freq++;
		return freq;

	}

	public int allFreqInDoc(Documents d, String query) {
		if (query.length() == 0)
			return 0;
		int allFreq = 0;
		String[] x = query.split("\\s+");
		for (int i = 0; i < x.length; i++) {
			allFreq += freqInDoc(d, x[i].trim().toLowerCase());
		}
		return allFreq;
	}

	public void rankQuery(String s) {
		if (s.length() == 0)
			return;
		Linkedlist<Integer> a = new Linkedlist<Integer>();
		String[] x = s.split("\\s+");
		boolean found = false;
		for (int i = 0; i < x.length; i++) {
			found = invertedBST.search(x[i].trim().toLowerCase());
			if (found)
				a = invertedBST.invertedIndexBST.retrieve().docIds;

			sorting(a);
		}

	}

	public void sorting(Linkedlist<Integer> a) {
		if (a.empty()) {
			System.out.println("Empty list");
			return;
		}
		a.findfirst();
		while (!a.last()) {
			boolean found = isExsistInResult(QueryDocsIds, a.retrieve());
			if (!found)
				insert(a.retrieve());
			a.findnext();
		}
		boolean found = isExsistInResult(QueryDocsIds, a.retrieve());
		if (!found)
			insert(a.retrieve());

	}

	public void insert(Integer i) {
		if (QueryDocsIds.empty()) {
			QueryDocsIds.insert(i);
			return;
		}
		QueryDocsIds.findfirst();
		while (!QueryDocsIds.last()) {
			if (i < QueryDocsIds.retrieve()) {
				Integer tmp = QueryDocsIds.retrieve();
				QueryDocsIds.update(i);
				QueryDocsIds.insert(tmp);
				return;
			} else
				QueryDocsIds.findnext();
		}
		if (i < QueryDocsIds.retrieve()) {
			Integer tmp = QueryDocsIds.retrieve();
			QueryDocsIds.update(i);
			QueryDocsIds.insert(tmp);
			return;
		} else
			QueryDocsIds.insert(i);

	}

	public boolean isExsistInResult(Linkedlist<Integer> result, int x) {
		if (result.empty())
			return false;
		result.findfirst();
		while (!result.last()) {
			if (result.retrieve().equals(x))
				return true;
			result.findnext();
		}
		if (result.retrieve().equals(x))
			return true;
		return false;
	}

	public void insertInRank(Rank r) {

		if (rankDocs.empty()) {
			rankDocs.insert(r);
			return;
		}
		rankDocs.findfirst();
		while (!rankDocs.last()) {
			if (r.rank > rankDocs.retrieve().rank) {
				Rank tmp = rankDocs.retrieve();
				rankDocs.update(r);
				rankDocs.insert(tmp);
				return;
			} else
				rankDocs.findnext();
		}
		if (r.rank > rankDocs.retrieve().rank) {
			Rank tmp = rankDocs.retrieve();
			rankDocs.update(r);
			rankDocs.insert(tmp);
		} else
			rankDocs.insert(r);

	}

	public void proccess() {
		rankQuery(query);
		if (QueryDocsIds.empty()) {
			System.out.println("Empty list");
			return;
		}
		QueryDocsIds.findfirst();
		while (!QueryDocsIds.last()) {
			Documents d = getDocsById(QueryDocsIds.retrieve());
			int rank = allFreqInDoc(d, query);
			insertInRank(new Rank(QueryDocsIds.retrieve(), rank));
			QueryDocsIds.findnext();
		}
		Documents d = getDocsById(QueryDocsIds.retrieve());
		int rank = allFreqInDoc(d, query);
		insertInRank(new Rank(QueryDocsIds.retrieve(), rank));
	}

	public void display() {
		System.out.println("DocID 	       score");
		rankDocs.findfirst();
		while (!rankDocs.last()) {
			rankDocs.retrieve().displayInRank();
			rankDocs.findnext();
		}
		rankDocs.retrieve().displayInRank();
	}
}
